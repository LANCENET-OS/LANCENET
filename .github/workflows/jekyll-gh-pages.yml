# Sample workflow for building and deploying a Jekyll site to GitHub Pages
name: Deploy Jekyll with GitHub Pages dependencies preinstalled

on:
  push:
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    name: Build Job
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install unzip
        run: sudo apt-get update && sudo apt-get install -y unzip

      - name: Clean up old '.rar' and '.zip' files
        run: |
          # Remove all existing .rar and .zip files to ensure clean workspace
          echo "Cleaning up old .rar and .zip files..."
          rm -f *.rar *.zip
          echo "Old .rar and .zip files removed."

      - name: Archive the previous '.rar' file if any
        run: |
          # Get current date
          DATE=$(date +"%Y-%m-%d")
          
          # Check if a .rar file exists after cleanup
          RAR_FILE=$(find . -name "*.rar" | head -n 1)
          if [ -n "$RAR_FILE" ]; then
            # Create 'Archive' folder if it doesn't exist
            mkdir -p Archive
            
            # Rename and move the old .rar file to Archive folder as 'archived.(thisdate).zip'
            NEW_ARCHIVE_NAME="archived.$DATE.zip"
            zip -r "./Archive/$NEW_ARCHIVE_NAME" "$RAR_FILE"
            echo "Archived and moved $RAR_FILE to ./Archive/$NEW_ARCHIVE_NAME"
            
            # Remove the original .rar file after archiving
            rm "$RAR_FILE"
          else
            echo "No old .rar file found to archive."
          fi

      - name: Rename incoming '.rar' file to 'currentbuild.(thisdate).zip'
        run: |
          # Find the incoming .rar file
          NEW_RAR_FILE=$(find . -name "*.rar" | head -n 1)
          if [ -n "$NEW_RAR_FILE" ]; then
            # Rename the incoming .rar file
            DATE=$(date +"%Y-%m-%d")
            NEW_NAME="currentbuild.$DATE.zip"
            mv "$NEW_RAR_FILE" "$NEW_NAME"
            echo "Renamed $NEW_RAR_FILE to $NEW_NAME"
          else
            echo "No incoming .rar file found to rename."
          fi

      - name: Find and extract the zip file matching 'currentbuild.*.zip'
        run: |
          ZIP_FILE=$(find . -name "currentbuild.*.zip" | head -n 1)
          if [ -n "$ZIP_FILE" ]; then
            echo "Found zip file: $ZIP_FILE"
          
            # Extract the zip file
            unzip "$ZIP_FILE" -d ./
          
            # List files to verify extraction
            ls -la
          else
            echo "No zip file found to extract."
          fi

      - name: Display 'index.html' content before replacement
        run: cat index.html

      - name: Replace strings in 'index.html'
        uses: thiagodnf/string-replacer@v1.0.2
        with:
          find: '/img/'
          replace: './img/'
          include: 'index.html'

      - name: Display 'index.html' content after replacement
        run: cat index.html

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Build with Jekyll
        uses: actions/jekyll-build-pages@v1
        with:
          source: ./
          destination: ./_site

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3

  deploy:
    name: Deploy Job
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
